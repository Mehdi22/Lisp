# Project:	AI HW2 - eight puzzle
# Name:		Mengqi Zong
# Email:	mz2326@columbia.edu

1. How to run the program.

a) Compile the program
First, please compile queue.lisp. Then compile eight-puzzle.lisp.

b) Run by default config
The easiest way to run the program is typing (solve-puzzle). By default, intitial state is generated by randomly making 30 steps from goal state (0 1 2 3 4 5 6 7 8). And the default heuristic function is misplaced-titles.

c) Customized run

Here is the definition of function solve-puzzle:
(defun solve-puzzle (&optional (heurf #'misplaced-tiles)
		     (initial-state '(0 1 2 3 4 5 6 7 8)) (step 30))
		     ...)

Two heuristic functions are #'misplaced-tiles and #'manhattan-distance. Typing (solve-puzzle #'manhattan-distance) will solve a random intial state using heuristic function #'manhattan-distance.

If you want use a specified initial state, for example (8 7 6 5 4 3 2 1 0). Syntax is:
(solve-puzzle #'misplaced-tiles '(8 7 6 5 4 3 2 1 0) 0)

Be _CAREFUL_ about the last parameter 0. This means program will not randomnize the initial state (In another way, randomly moving the initial state by 0 step).

Also, the program does not have any error checking mechanism. In order to get the right result, you have to make sure the input is correct.

2. Examples

a) Example 1

# a.1 misplaced-tiles 

CL-USER> (solve-puzzle)
Initial state: (2 8 5 1 0 7 3 6 4)
processing...
node: 1106
step: 14
((2 0 5 1 8 7 3 6 4) (0 2 5 1 8 7 3 6 4) (1 2 5 0 8 7 3 6 4)
 (1 2 5 3 8 7 0 6 4) (1 2 5 3 8 7 6 0 4) (1 2 5 3 0 7 6 8 4)
 (1 2 5 3 7 0 6 8 4) (1 2 5 3 7 4 6 8 0) (1 2 5 3 7 4 6 0 8)
 (1 2 5 3 0 4 6 7 8) (1 2 5 3 4 0 6 7 8) (1 2 0 3 4 5 6 7 8)
 (1 0 2 3 4 5 6 7 8) (0 1 2 3 4 5 6 7 8))

# a.2 manhattan-distance

CL-USER> (solve-puzzle #'manhattan-distance '(2 8 5 1 0 7 3 6 4) 0)
Initial state: (2 8 5 1 0 7 3 6 4)
processing...
node: 21855
step: 14
((2 0 5 1 8 7 3 6 4) (0 2 5 1 8 7 3 6 4) (1 2 5 0 8 7 3 6 4)
 (1 2 5 3 8 7 0 6 4) (1 2 5 3 8 7 6 0 4) (1 2 5 3 0 7 6 8 4)
 (1 2 5 3 7 0 6 8 4) (1 2 5 3 7 4 6 8 0) (1 2 5 3 7 4 6 0 8)
 (1 2 5 3 0 4 6 7 8) (1 2 5 3 4 0 6 7 8) (1 2 0 3 4 5 6 7 8)
 (1 0 2 3 4 5 6 7 8) (0 1 2 3 4 5 6 7 8))

b) Example 2

# b.1 misplaced-tiles

CL-USER> (solve-puzzle)
Initial state: (6 4 3 1 2 5 7 8 0)
processing...
node: 15135
step: 16
((6 4 3 1 2 0 7 8 5) (6 4 3 1 0 2 7 8 5) (6 4 3 0 1 2 7 8 5)
 (0 4 3 6 1 2 7 8 5) (4 0 3 6 1 2 7 8 5) (4 3 0 6 1 2 7 8 5)
 (4 3 2 6 1 0 7 8 5) (4 3 2 6 1 5 7 8 0) (4 3 2 6 1 5 7 0 8)
 (4 3 2 6 1 5 0 7 8) (4 3 2 0 1 5 6 7 8) (0 3 2 4 1 5 6 7 8)
 (3 0 2 4 1 5 6 7 8) (3 1 2 4 0 5 6 7 8) (3 1 2 0 4 5 6 7 8)
 (0 1 2 3 4 5 6 7 8))

# b.2 manhattan-distance

CL-USER> (solve-puzzle #'manhattan-distance '(6 4 3 1 2 5 7 8 0) 0)
Initial state: (6 4 3 1 2 5 7 8 0)
processing...
node: 27699
step: 16
((6 4 3 1 2 0 7 8 5) (6 4 3 1 0 2 7 8 5) (6 0 3 1 4 2 7 8 5)
 (6 3 0 1 4 2 7 8 5) (6 3 2 1 4 0 7 8 5) (6 3 2 1 4 5 7 8 0)
 (6 3 2 1 4 5 7 0 8) (6 3 2 1 0 5 7 4 8) (6 3 2 0 1 5 7 4 8)
 (0 3 2 6 1 5 7 4 8) (3 0 2 6 1 5 7 4 8) (3 1 2 6 0 5 7 4 8)
 (3 1 2 6 4 5 7 0 8) (3 1 2 6 4 5 0 7 8) (3 1 2 0 4 5 6 7 8)
 (0 1 2 3 4 5 6 7 8))

c) Example 3

# c.1 misplaced-tiles

CL-USER> (solve-puzzle)
Initial state: (0 3 1 4 7 2 6 8 5)
processing...
node: 10
step: 8
((3 0 1 4 7 2 6 8 5) (3 1 0 4 7 2 6 8 5) (3 1 2 4 7 0 6 8 5)
 (3 1 2 4 7 5 6 8 0) (3 1 2 4 7 5 6 0 8) (3 1 2 4 0 5 6 7 8)
 (3 1 2 0 4 5 6 7 8) (0 1 2 3 4 5 6 7 8))

# c.2 manhattan-distance

CL-USER> (solve-puzzle #'manhattan-distance '(0 3 1 4 7 2 6 8 5) 0)
Initial state: (0 3 1 4 7 2 6 8 5)
processing...
node: 84
step: 8
((3 0 1 4 7 2 6 8 5) (3 1 0 4 7 2 6 8 5) (3 1 2 4 7 0 6 8 5)
 (3 1 2 4 7 5 6 8 0) (3 1 2 4 7 5 6 0 8) (3 1 2 4 0 5 6 7 8)
 (3 1 2 0 4 5 6 7 8) (0 1 2 3 4 5 6 7 8))

d) Example 4

# d.1 misplaced-tiles

CL-USER> (solve-puzzle)
Initial state: (4 3 0 5 2 1 6 7 8)
processing...
node: 88
step: 10
((4 3 1 5 2 0 6 7 8) (4 3 1 5 0 2 6 7 8) (4 3 1 0 5 2 6 7 8)
 (0 3 1 4 5 2 6 7 8) (3 0 1 4 5 2 6 7 8) (3 1 0 4 5 2 6 7 8)
 (3 1 2 4 5 0 6 7 8) (3 1 2 4 0 5 6 7 8) (3 1 2 0 4 5 6 7 8)
 (0 1 2 3 4 5 6 7 8))

# d.2 manhattan-distance

CL-USER> (solve-puzzle #'manhattan-distance '(4 3 0 5 2 1 6 7 8) 0)
Initial state: (4 3 0 5 2 1 6 7 8)
processing...
node: 350
step: 10
((4 3 1 5 2 0 6 7 8) (4 3 1 5 0 2 6 7 8) (4 3 1 0 5 2 6 7 8)
 (0 3 1 4 5 2 6 7 8) (3 0 1 4 5 2 6 7 8) (3 1 0 4 5 2 6 7 8)
 (3 1 2 4 5 0 6 7 8) (3 1 2 4 0 5 6 7 8) (3 1 2 0 4 5 6 7 8)
 (0 1 2 3 4 5 6 7 8))

e) Example 5

# e.1 misplaced-tiles

CL-USER> (solve-puzzle)
Initial state: (3 1 2 6 0 5 7 4 8)
processing...
node: 4
step: 4
((3 1 2 6 4 5 7 0 8) (3 1 2 6 4 5 0 7 8) (3 1 2 0 4 5 6 7 8)
 (0 1 2 3 4 5 6 7 8))

# e.2 manhattan-distance

CL-USER> (solve-puzzle #'manhattan-distance '(3 1 2 6 0 5 7 4 8) 0)
Initial state: (3 1 2 6 0 5 7 4 8)
processing...
node: 8
step: 4
((3 1 2 6 4 5 7 0 8) (3 1 2 6 4 5 0 7 8) (3 1 2 0 4 5 6 7 8)
 (0 1 2 3 4 5 6 7 8))
